#!/bin/bash
# TemplateGenerator - Script to create multiple Proxmox templates

# Execute with: bash <(curl -fsSL https://raw.githubusercontent.com/OranjeBanaan/Proxmox/main/TemplateGenerator.txt)

apt install -y libguestfs-tools guestfish

DEBUG_MODE=false

run_cmd() {
    if [ "$DEBUG_MODE" = true ]; then
        "$@"
    else
        "$@" > /dev/null 2>&1
    fi
}

show_progress() {
    local current_step=$1
    local total_steps=6
    local progress=$(( (current_step * 100) / total_steps ))
    echo -ne "Progress: ${progress}%\r"
}

delete_existing_vm() {
    local vmid=$1
    local name=$2

    if qm status "$vmid" &> /dev/null; then
        echo "Deleting ${name}..."
        run_cmd qm stop "$vmid"
        run_cmd qm destroy "$vmid" --destroy-unreferenced-disks
    fi
}

# Helper: inject cloud-init userdata script into image
inject_cloud_init_agent_install() {
    local image_file=$1
    local name=$2

    echo "Injecting cloud-init install script for $name"

    cat > install-agent.yaml <<EOF
#cloud-config
runcmd:
  - dnf install -y qemu-guest-agent
  - systemctl enable qemu-guest-agent
  - systemctl start qemu-guest-agent
EOF

    virt-customize -a "$image_file" --upload install-agent.yaml:/var/lib/cloud/seed/nocloud-net/user-data
    rm -f install-agent.yaml
}

# Use virt-customize for Debian/Ubuntu, cloud-init method for Fedora
customize_image() {
    local image_file=$1
    local name=$2

    if [[ "$name" == Fedora* ]]; then
        inject_cloud_init_agent_install "$image_file" "$name"
    else
        run_cmd virt-customize -a "$image_file" --install qemu-guest-agent
    fi
}

create_template() {
    local vmid=$1
    local name=$2
    local image_url=$3
    local image_file="${name}-cloudimg.img"

    delete_existing_vm "$vmid" "$name"
    echo "Generating ${name}..."

    # Step 1: Download image
    run_cmd wget -O "${image_file}" "${image_url}"
    show_progress 1

    # Step 2: Customize image (agent install)
    customize_image "$image_file" "$name"
    show_progress 2

    # Step 3: Create base VM
    run_cmd qm create "$vmid" --memory 2048 --cpu host --core 2 --name "$name" --net0 virtio,bridge=vmbr0
    show_progress 3

    # Step 4: Import disk
    run_cmd qm disk import "$vmid" "$image_file" local-lvm
    show_progress 4

    # Step 5: Configure VM hardware
    run_cmd qm set "$vmid" --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-"$vmid"-disk-0,discard=on,ssd=1
    run_cmd qm disk resize "$vmid" scsi0 8G
    run_cmd qm set "$vmid" --ide2 local-lvm:cloudinit
    run_cmd qm set "$vmid" --boot c --bootdisk scsi0
    run_cmd qm set "$vmid" --agent enabled=1
    show_progress 5

    # Step 6: Convert to template
    run_cmd qm template "$vmid"
    show_progress 6

    echo -ne "Progress: 100%\n"
    echo "âœ… ${name} template created successfully (VMID ${vmid})"
}

# Create templates
create_template 8000 "Ubuntu24.04Template" "https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img"
create_template 7999 "Ubuntu24.10Template" "https://cloud-images.ubuntu.com/oracular/current/oracular-server-cloudimg-amd64.img"
create_template 7998 "Ubuntu22.04Template" "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img"
create_template 7997 "Debian11Template" "https://cdimage.debian.org/images/cloud/bullseye/latest/debian-11-generic-amd64.qcow2"
create_template 7996 "Debian12Template" "https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2"
create_template 7995 "Fedora42Template" "https://download.fedoraproject.org/pub/fedora/linux/releases/42/Cloud/x86_64/images/Fedora-Cloud-Base-Generic-42-1.1.x86_64.qcow2"

echo "ðŸŽ‰ All templates processed."

# Usage:
# chmod +x TemplateGenerator
# ./TemplateGenerator
