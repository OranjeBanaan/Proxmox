#!/bin/bash
# TemplateGenerator - Create multiple Proxmox templates with a multi-select menu
#
# Run:
#   bash <(curl -fsSL https://raw.githubusercontent.com/OranjeBanaan/Proxmox/main/TemplateGenerator.txt)
#   or:
#   bash <(curl -fsSL "https://raw.githubusercontent.com/OranjeBanaan/Proxmox/main/TemplateGenerator.txt?$(date +%s)")
#
# Non-interactive examples:
#   ./TemplateGenerator --debug Ubuntu24.04 Debian12 AlmaLinux8
#   DEBUG_MODE=1 ./TemplateGenerator Ubuntu24.04

set -o pipefail

# ===== Config =====
DEBUG_MODE=false                     # default; can be overridden via --debug / --no-debug or env
PVE_STORAGE="${PVE_STORAGE:-local-lvm}"  # Proxmox storage for disks + cloud-init

# ===== Helpers =====
run_cmd() {
  # Run command verbosely in debug mode; otherwise suppress stdout+stderr but keep exit code.
  if [ "$DEBUG_MODE" = true ]; then
    "$@"
  else
    "$@" >/dev/null 2>&1
  fi
}

show_progress() {
  local current_step=$1
  local total_steps=7  # we added a cleanup step
  local progress=$(( (current_step * 100) / total_steps ))
  echo -ne "Progress: ${progress}%\r"
}

delete_existing_vm() {
  local vmid=$1
  local name=$2
  if qm status "$vmid" &>/dev/null; then
    echo "Deleting ${name} (VMID ${vmid})..."
    run_cmd qm stop "$vmid"
    run_cmd qm destroy "$vmid" --destroy-unreferenced-disks
  fi
}

# Decide whether to apply SELinux relabel based on distro name or image contents
use_selinux_relabel() {
  local image_file=$1
  local name=$2

  # Fast path by name
  if [[ "$name" == Fedora* ]] || [[ "$name" == CentOS* ]] || [[ "$name" == RHEL* ]] || \
     [[ "$name" == AlmaLinux* ]] || [[ "$name" == Rocky* ]]; then
    return 0
  fi

  # Best-effort content detection
  if guestfish --ro -a "$image_file" -i cat /etc/selinux/config 2>/dev/null | grep -q '^SELINUX='; then
    return 0
  fi

  return 1
}

create_template() {
  local vmid=$1
  local name=$2
  local image_url=$3

  # Derive a local filename from the URL if possible; otherwise keep provided naming
  local img_ext="${image_url##*.}"
  case "$img_ext" in
    qcow2|img) : ;;   # keep
    *) img_ext="img" ;;
  esac
  local image_file="${name}-cloudimg.${img_ext}"

  delete_existing_vm "$vmid" "$name"

  echo "Generating ${name} (VMID ${vmid})..."

  # Step 1: Download cloud image
  if ! wget -q --show-progress --progress=bar:force:noscroll "${image_url}" -O "${image_file}"; then
    echo "‚ùå Failed to download image for ${name} from ${image_url}"
    return 1
  fi
  show_progress 1

  # Step 2: Prepare image (install qemu-guest-agent); handle SELinux relabel if needed
  if command -v virt-customize >/dev/null 2>&1; then
    if use_selinux_relabel "$image_file" "$name"; then
      echo "Applying SELinux relabel to ${name} image"
      if ! run_cmd virt-customize -a "${image_file}" --install qemu-guest-agent --selinux-relabel; then
        echo "‚ùå virt-customize failed on ${name} (SELinux relabel)"
        return 1
      fi
    else
      if ! run_cmd virt-customize -a "${image_file}" --install qemu-guest-agent; then
        echo "‚ùå virt-customize failed on ${name}"
        return 1
      fi
    fi
  else
    echo "‚ö†Ô∏è  Skipping virt-customize for ${name}: tool not available."
    echo "    (You can still install qemu-guest-agent later via cloud-init or manually.)"
  fi
  show_progress 2

  # Step 3: Create VM shell
  run_cmd qm create "${vmid}" --memory 2048 --cpu host --cores 2 --name "${name}" --net0 virtio,bridge=vmbr0
  show_progress 3

  # Step 4: Import disk
  if ! run_cmd qm disk import "${vmid}" "${image_file}" "${PVE_STORAGE}"; then
    echo "‚ùå Failed to import disk for ${name}"
    return 1
  fi
  show_progress 4

  # Step 5: VM config
  run_cmd qm set "${vmid}" --scsihw virtio-scsi-pci --scsi0 "${PVE_STORAGE}:vm-${vmid}-disk-0,discard=on,ssd=1"
  run_cmd qm disk resize "${vmid}" scsi0 8G
  run_cmd qm set "${vmid}" --ide2 "${PVE_STORAGE}:cloudinit"
  run_cmd qm set "${vmid}" --boot c --bootdisk scsi0
  run_cmd qm set "${vmid}" --agent enabled=1
  show_progress 5

  # Step 6: Convert to template
  run_cmd qm template "${vmid}"
  show_progress 6

  # Step 7: Cleanup local image
  run_cmd rm -f "${image_file}"
  show_progress 7

  echo -ne "Progress: 100%\n"
  echo "‚úÖ ${name} template created successfully (VMID ${vmid})"
}

# ===== Ensure dependencies (loud + verified) =====
# (Do this loudly so you can see failures; later steps honor DEBUG_MODE for noise control)
need_pkgs=(libguestfs-tools guestfish qemu-utils whiptail wget)
echo "üîé Ensuring required packages: ${need_pkgs[*]} ..."
if ! { apt-get update -y && DEBIAN_FRONTEND=noninteractive apt-get install -y "${need_pkgs[@]}"; }; then
  echo "‚ùå Package install failed. Try manually: apt-get update && apt-get install -y ${need_pkgs[*]}"
  exit 1
fi

# Double-check critical tools
for bin in guestfish wget qm; do
  if ! command -v "$bin" >/dev/null 2>&1; then
    echo "‚ùå Required binary '$bin' not found even after install. Aborting."
    exit 1
  fi
done
# virt-customize is optional; warn if missing
if ! command -v virt-customize >/dev/null 2>&1; then
  echo "‚ÑπÔ∏è  'virt-customize' not found ‚Äî image customization will be skipped (OK)."
fi

# ===== Template registry (id | name | url) =====
declare -A TEMPLATE_VMID
declare -A TEMPLATE_NAME
declare -A TEMPLATE_URL

TEMPLATE_VMID["Ubuntu24.04"]=8000
TEMPLATE_NAME["Ubuntu24.04"]="Ubuntu24.04Template"
TEMPLATE_URL["Ubuntu24.04"]="https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img"

TEMPLATE_VMID["Ubuntu24.10"]=7999
TEMPLATE_NAME["Ubuntu24.10"]="Ubuntu24.10Template"
TEMPLATE_URL["Ubuntu24.10"]="https://cloud-images.ubuntu.com/oracular/current/oracular-server-cloudimg-amd64.img"

TEMPLATE_VMID["Ubuntu22.04"]=7998
TEMPLATE_NAME["Ubuntu22.04"]="Ubuntu22.04Template"
TEMPLATE_URL["Ubuntu22.04"]="https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img"

TEMPLATE_VMID["Debian11"]=7997
TEMPLATE_NAME["Debian11"]="Debian11Template"
TEMPLATE_URL["Debian11"]="https://cdimage.debian.org/images/cloud/bullseye/latest/debian-11-generic-amd64.qcow2"

TEMPLATE_VMID["Debian12"]=7996
TEMPLATE_NAME["Debian12"]="Debian12Template"
TEMPLATE_URL["Debian12"]="https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2"

TEMPLATE_VMID["Fedora42"]=7995
TEMPLATE_NAME["Fedora42"]="Fedora42Template"
TEMPLATE_URL["Fedora42"]="https://download.fedoraproject.org/pub/fedora/linux/releases/42/Cloud/x86_64/images/Fedora-Cloud-Base-Generic-42-1.1.x86_64.qcow2"

# ‚≠ê AlmaLinux 8
TEMPLATE_VMID["AlmaLinux8"]=7994
TEMPLATE_NAME["AlmaLinux8"]="AlmaLinux8Template"
TEMPLATE_URL["AlmaLinux8"]="https://repo.almalinux.org/almalinux/8/cloud/x86_64/images/AlmaLinux-8-GenericCloud-latest.x86_64.qcow2"

# ===== Debug Mode controls =====
# Env DEBUG_MODE (e.g., DEBUG_MODE=1) or flags --debug / --no-debug
if [ "${DEBUG_MODE}" != "true" ] && [ -n "${DEBUG_MODE+x}" ]; then
  case "$DEBUG_MODE" in
    1|true|TRUE|on|ON|yes|YES) DEBUG_MODE=true ;;
    *) DEBUG_MODE=false ;;
  esac
fi

FORCE_DEBUG_CHOSEN=false
EXTRA_KEYS=()
for arg in "$@"; do
  case "$arg" in
    --debug) DEBUG_MODE=true; FORCE_DEBUG_CHOSEN=true ;;
    --no-debug) DEBUG_MODE=false; FORCE_DEBUG_CHOSEN=true ;;
    *) EXTRA_KEYS+=("$arg") ;;
  esac
done

# ===== Interactive multi-select menu (whiptail) =====
SELECTED_KEYS=()

if [ "${#EXTRA_KEYS[@]}" -gt 0 ]; then
  # Non-interactive: keys passed on CLI
  SELECTED_KEYS=("${EXTRA_KEYS[@]}")
else
  # Ask for Debug Mode first (unless flag forced it)
  if [ "$FORCE_DEBUG_CHOSEN" = false ]; then
    if whiptail --title "Template Generator" --yesno "Enable debug mode (verbose output)?" 10 70; then
      DEBUG_MODE=true
    else
      DEBUG_MODE=false
    fi
  fi

  MENU_ITEMS=(
    "Ubuntu24.04" "Ubuntu 24.04 LTS" ON
    "Ubuntu24.10" "Ubuntu 24.10" OFF
    "Ubuntu22.04" "Ubuntu 22.04 LTS" OFF
    "Debian11"    "Debian 11 (Bullseye)" OFF
    "Debian12"    "Debian 12 (Bookworm)" ON
    "Fedora42"    "Fedora 42 Cloud" ON
    "AlmaLinux8"  "AlmaLinux 8 GenericCloud" ON
  )

  CHOICES=$(whiptail --title "Template Generator (Debug: $( [ "$DEBUG_MODE" = true ] && echo ON || echo OFF ))" \
            --checklist "Select templates to generate (SPACE to toggle, ENTER to confirm)" \
            20 78 12 \
            "${MENU_ITEMS[@]}" \
            3>&1 1>&2 2>&3)

  if [ $? -ne 0 ]; then
    echo "Cancelled."
    exit 1
  fi

  # whiptail returns quoted entries
  # shellcheck disable=SC2206
  SELECTED_KEYS=(${CHOICES//\"/})
fi

if [ ${#SELECTED_KEYS[@]} -eq 0 ]; then
  echo "No templates selected."
  exit 0
fi

echo "üêû Debug mode: $([ "$DEBUG_MODE" = true ] && echo ON || echo OFF)"
echo "üèó  Starting generation for: ${SELECTED_KEYS[*]}"
echo "üì¶ Target storage: ${PVE_STORAGE}"

# ===== Main loop =====
for key in "${SELECTED_KEYS[@]}"; do
  if [[ -z "${TEMPLATE_VMID[$key]}" ]]; then
    echo "‚ö†Ô∏è  Unknown template key: ${key} (skipping)"
    continue
  fi
  create_template "${TEMPLATE_VMID[$key]}" "${TEMPLATE_NAME[$key]}" "${TEMPLATE_URL[$key]}"
done

echo "üéâ All selected templates processed."
echo "Tip: non-interactive run with debug:"
echo "  ./TemplateGenerator --debug Ubuntu24.04 Debian12 AlmaLinux8"
