#!/bin/bash
# TemplateGenerator - Script to create multiple Proxmox templates

# Execute with: bash <(curl -fsSL https://raw.githubusercontent.com/OranjeBanaan/Proxmox/main/TemplateGenerator.txt)
# or with bash <(curl -fsSL "https://raw.githubusercontent.com/OranjeBanaan/Proxmox/main/TemplateGenerator.txt?$(date +%s)")

# Ensure required packages
apt install -y libguestfs-tools guestfish

DEBUG_MODE=false

run_cmd() {
    if [ "$DEBUG_MODE" = true ]; then
        "$@"
    else
        "$@" > /dev/null 2>&1
    fi
}

show_progress() {
    local current_step=$1
    local total_steps=6
    local progress=$(( (current_step * 100) / total_steps ))
    echo -ne "Progress: ${progress}%\r"
}

delete_existing_vm() {
    local vmid=$1
    local name=$2

    if qm status "$vmid" &> /dev/null; then
        echo "Deleting ${name}..."
        run_cmd qm stop "$vmid"
        run_cmd qm destroy "$vmid" --destroy-unreferenced-disks
    fi
}

ensure_snippets_enabled() {
    local storage_cfg="/etc/pve/storage.cfg"
    local snippets_path="/var/lib/vz/snippets"

    mkdir -p "$snippets_path"

    if ! grep -q "snippets" "$storage_cfg"; then
        echo "Configuring 'snippets' support in $storage_cfg..."
        echo -e "\ndir: local\n    path /var/lib/vz\n    content iso,vztmpl,backup,images,rootdir,snippets" >> "$storage_cfg"
        pvecm updatecerts -f
        systemctl restart pvedaemon
        systemctl restart pveproxy
        systemctl restart pvestatd
    else
        echo "'snippets' already enabled."
    fi
}

prepare_cloudinit_snippet() {
    local name=$1
    local snippet_path="/var/lib/vz/snippets/${name}-cloudinit.yaml"

    echo "Creating CloudInit snippet for ${name}..."
    cat > "$snippet_path" <<EOF
#cloud-config
packages:
  - qemu-guest-agent
runcmd:
  - systemctl enable qemu-guest-agent
  - systemctl start qemu-guest-agent
EOF
}

customize_image() {
    local image_file=$1
    local name=$2

    if [[ "$name" == Fedora* ]]; then
        echo "⚠️ Skipping virt-customize for Fedora."
        return
    fi

    run_cmd virt-customize -a "$image_file" --install qemu-guest-agent
}

create_template() {
    local vmid=$1
    local name=$2
    local image_url=$3
    local image_file="${name}-cloudimg.img"

    delete_existing_vm "$vmid" "$name"
    echo "Generating ${name}..."

    # Step 1: Download cloud image
    run_cmd wget "${image_url}" -O "${image_file}"
    show_progress 1

    # Step 2: Customize image or prepare snippet
    customize_image "$image_file" "$name"
    if [[ "$name" == Fedora* ]]; then
        prepare_cloudinit_snippet "$name"
    fi
    show_progress 2

    # Step 3: Create VM
    run_cmd qm create "$vmid" --memory 2048 --cpu host --core 2 --name "$name" --net0 virtio,bridge=vmbr0
    show_progress 3

    # Step 4: Import disk
    run_cmd qm disk import "$vmid" "$image_file" local-lvm
    show_progress 4

    # Step 5: Configure VM
    run_cmd qm set "$vmid" --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-"$vmid"-disk-0,discard=on,ssd=1
    run_cmd qm disk resize "$vmid" scsi0 8G
    run_cmd qm set "$vmid" --ide2 local-lvm:cloudinit
    run_cmd qm set "$vmid" --boot c --bootdisk scsi0
    run_cmd qm set "$vmid" --agent enabled=1

    # Step 5.5: Assign CloudInit snippet if Fedora
    if [[ "$name" == Fedora* ]]; then
        run_cmd qm set "$vmid" --cicustom "user=local:snippets/${name}-cloudinit.yaml"
    fi
    show_progress 5

    # Step 6: Convert to template
    run_cmd qm template "$vmid"
    show_progress 6

    echo -ne "Progress: 100%\n"
    echo "✅ ${name} template created successfully (VMID ${vmid})"
}

# Ensure Proxmox can use snippets
ensure_snippets_enabled

# Build templates
create_template 8000 "Ubuntu24.04Template" "https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img"
create_template 7999 "Ubuntu24.10Template" "https://cloud-images.ubuntu.com/oracular/current/oracular-server-cloudimg-amd64.img"
create_template 7998 "Ubuntu22.04Template" "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img"
create_template 7997 "Debian11Template" "https://cdimage.debian.org/images/cloud/bullseye/latest/debian-11-generic-amd64.qcow2"
create_template 7996 "Debian12Template" "https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2"
create_template 7995 "Fedora42Template" "https://download.fedoraproject.org/pub/fedora/linux/releases/42/Cloud/x86_64/images/Fedora-Cloud-Base-Generic-42-1.1.x86_64.qcow2"

echo "🎉 All templates processed successfully."

# Usage:
# chmod +x TemplateGenerator
# ./TemplateGenerator
